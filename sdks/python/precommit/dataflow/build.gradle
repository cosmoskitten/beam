/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * License); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Define common lifecycle tasks and artifact types
apply plugin: "base"

// For some reason base doesn't define a test task  so we define it below and make
// check depend on it. This makes the Python project similar to the task layout like
// Java projects, see https://docs.gradle.org/4.2.1/userguide/img/javaPluginTasks.png
task test {}
check.dependsOn test

// Since we reuse setupVirtualenv from :beam-sdks-python, created virtualenv
// is located in build directory of :beam-sdks-python, not under current
// directory.
def pythonRoot = "${project.rootDir}/sdks/python"
def envdir = "${pythonRoot}/build/gradleenv"

task precommitIT {
  dependsOn ':beam-sdks-python:sdist'
  dependsOn ':beam-sdks-python:installGcpTest'

  doLast {
    // List of integration tests running in Python PreCommit.
    def precommitTests = [
        "apache_beam.examples.wordcount_it_test:WordCountIT.test_wordcount_it",
        "apache_beam.examples.streaming_wordcount_it_test:StreamingWordCountIT.test_streaming_wordcount_it",
    ]
    def testOpts = [
        "--tests=${precommitTests.join(',')}",
        "--nocapture",
        "--nologcapture",
        "--processes=4",
        "--process-timeout=1800",   // Total timeout includes all tests run.
    ]

    exec {
      executable 'sh'
      args '-c', ". ${envdir}/bin/activate && ${pythonRoot}/scripts/run_integration_test.sh --test_opts \"${testOpts.join(' ')}\""
    }
  }
}
