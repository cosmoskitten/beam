/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Protocol Buffers describing the Artifact API, for communicating with a runner
 * for artifact staging and retrieval over GRPC.
 */

syntax = "proto3";

package org.apache.beam.runner_api.v1;

option java_package = "org.apache.beam.sdk.common.runner.v1";
option java_outer_classname = "ArtifactApi";

service ArtifactService {
  // Get the manifest for the job
  rpc GetManifest(GetManifestRequest) returns (GetManifestResponse);

  // Get an artifact staged for the job. The requested artifact must be within the manifest
  rpc GetArtifact(GetArtifactRequest) returns (stream ArtifactChunk);

  // Stage an artifact to be available during job execution
  rpc PutArtifact(stream PutArtifactRequest) returns (PutArtifactResponse);
}

message Artifact {
  string name = 1;
  int32 permissions = 2;
  string md5 = 3;
}

message GetManifestRequest {
}

message GetManifestResponse {
  repeated Artifact artifact = 1;
}

message GetArtifactRequest {
  string name = 1;
}

message ArtifactChunk {
  bytes data = 1;
}

message PutArtifactRequest {
  string name = 1;
  int32 permissions = 2;
  string md5 = 3;
  ArtifactChunk data = 4;
}

message PutArtifactResponse {
}

