/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Protocol Buffers describing the Runner API, which is the runner-independent,
 * SDK-independent definition of the Beam model.
 */

syntax = "proto3";

package org.apache.beam.model.pipeline.v1;

option go_package = "pipeline_v1";
option java_package = "org.apache.beam.model.pipeline.v1";
option java_outer_classname = "StandardWindowFns";

import "beam_runner_api.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

message StandardWindowFnUrns {
  enum Enum {
    // Empty payload
    // TODO(BEAM-3595): Change this to beam:windowfn:global_windows:v1
    GLOBAL_WINDOWS = 0 [(standard_urn) = "beam:windowfn:global_windows:v0.1"];

    // Payload of type FixedWindowsPayload
    // TODO(BEAM-3595): Change this to beam:windowfn:fixed_windows:v1
    FIXED_WINDOWS = 1 [(standard_urn) = "beam:windowfn:fixed_windows:v0.1"];

    // Payload of type SlidingWindowsPayload
    // TODO(BEAM-3595): Change this to beam:windowfn:sliding_windows:v1
    SLIDING_WINDOWS = 2 [(standard_urn) = "beam:windowfn:sliding_windows:v0.1"];

    // Payload of type SessionsPayload
    // TODO(BEAM-3595): Change this to beam:windowfn:session_windows:v1
    SESSION_WINDOWS = 3 [(standard_urn) = "beam:windowfn:session_windows:v0.1"];
  }
}

message FixedWindowsPayload {
  google.protobuf.Duration size = 1;
  google.protobuf.Timestamp offset = 2;
}

message SlidingWindowsPayload {
  google.protobuf.Duration size = 1;
  google.protobuf.Timestamp offset = 2;
  google.protobuf.Duration period = 3;
}

message SessionsPayload {
  google.protobuf.Duration gap_size = 1;
}
